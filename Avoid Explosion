class DSU {
    vector<int>parent;
    public:
     DSU(int n){
         parent = vector<int>(n+1);
         for(int i=0;i<=n;i++) parent[i] = i;
         
     }
     int findRoot(int x){
         while(x != parent[x]){
             parent[x] = parent[parent[x]];
             x =parent[x];
         }
         return x;
     }
     void combine(int u, int v){
         int ru = findRoot(u);
         int rv = findRoot(v);
         if(ru==rv) return;
         
         parent[ru] = rv;
         
         return;
     }
};

class Solution {
    
  public:
    vector<string> avoidExplosion(vector<vector<int>> mix, int n,vector<vector<int>> danger, int m) {
        DSU dsu(n);
        vector<string>ans(n);
        for(int i=0;i<n;i++){
            int ru =dsu.findRoot(mix[i][0]);
            int rv =dsu.findRoot(mix[i][1]);
            
            if(ru == rv){
                ans[i] = "Yes";
                continue;
            }
            bool doesExplode=false;
            
            for(int j=0;j<m;j++){
                int dx =dsu.findRoot(danger[j][0]);
                int dy =dsu.findRoot(danger[j][1]);
                if(max(ru,rv) == max(dx,dy) && min(ru,rv) == min (dx,dy)){
                    doesExplode = true;
                    break;
                }
            }
            
            if(doesExplode){
                ans[i] ="No";
                continue;
            }
            else {
                ans[i] ="Yes";
                dsu.combine(mix[i][0],mix[i][1]);
            }
            
        }
        return ans;
                                      
                                      
 }
