class Solution{
    string ans;
    
    void updateAns(string newAns){
        if(ans =="")  ans=newAns;
        else if (ans.size() < newAns.size()) return;
        else if(ans.size() > newAns.size())  ans=newAns;
        else if(ans >newAns){
            ans =newAns;
        }
    }
    
    bool isInside(string a,string b){
        for(int i=0;i<a.size();i++){
            bool present =true;
            for(int j=0;j<b.size();j++){
                if(i+j >=a.size()){
                    present = false;
                    break;
                }
                else if(a[i+j] !=b[j]){
                    present =false;
                    break;
                }
            }
            if(present) return true;
            
        }
        return false;
    }
    void compute(string a, string b){
        updateAns(a+b);
        if(isInside(a,b)){
            updateAns(a);
        }
        else {
            
                for(int i= a.size();i>=0;i--){
                    int n =a.size()-i;
                    string suffix = a.substr(i,a.size());
                    string prefix = b.substr(0,n);
                    
                    if(suffix == prefix) {
                        updateAns(a+b.substr(n,b.size()));
                    }
                }
            }
    }
    
    
public:
    string commonString(string s,string t){
        compute(s,t);
        compute(t,s);
        return ans;
    }
