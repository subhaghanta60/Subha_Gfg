const int MOD = (int)(1e9+7);
class Solution{
    string S;
    int K;
    int dp[201][201][11][2];
    int func(int n, int sum, int k, int last){
        if(n==0 && sum==0 && k>=0){
            return 1;
        }
        else if (n==0 || sum <0 || k <0){
            return 0;
        }
        if(dp[n][sum][k][last] >=0) return dp[n][sum][k][last];
        else {
            if(S[n-1] != '?'){
                if(S[n-1] == '('){
                    if(last ==0){
                        dp[n][sum][k][last] = func(n-1,sum-1,k-1,last);
                    }
                    else {
                        dp[n][sum][k][last] = func(n-1,sum-1,K-1,0);
                    }
                }
                else if (S[n-1] == ')'){
                    if(last==0){
                        dp[n][sum][k][last] = func(n-1,sum+1,K-1,1);
                    }
                    else {
                        dp[n][sum][k][last] = func(n-1,sum+1,k-1,last);
                    }
                }
            }
            else {
                long long ans = 0L;
                if(last == 0){
                    ans +=(long long) func(n-1, sum-1, k-1, last);
                    ans +=(long long) func(n-1,sum+1,K-1,1);
                }
                else {
                    ans +=(long long) func(n-1,sum-1,K-1,0);
                    ans +=(long long) func(n-1, sum+1, k-1, last);
                }
                ans %=MOD;
                dp[n][sum][k][last] = (int)ans;
            }
            return dp[n][sum][k][last];
        }
        
    }
public:
    int countStrings(int n,string &s,int k){
        S=s;
        K=k;
        for(int i=0;i<=n;i++){
            for(int sum =0; sum <=n;sum++){
                for(int j=0;j<=k;j++){
                    for(int last =0;last<2;last++){
                        dp[i][sum][j][last] = -1;
                    }
                }
            }
        }
        return func(n,0,k,0);
    }
