int func(int ind, int arr[],vector<int>&dp){
    if(ind == 0){
        return arr[ind];
    }
    if(ind <0){
        return 0;
    }
    if(dp[ind] != -1) return dp[ind];
    int Take =arr[ind]+ func(ind-2,arr,dp);
    int nonTake = 0+func(ind-1,arr,dp);
    return dp[ind]=max(Take,nonTake);
}
public:	
	// calculate the maximum sum with out adjacent
	int findMaxSum(int *arr, int n) {
	    vector<int>dp(n,-1);
	    int sum = func(n-1,arr,dp);
	    return sum;
	}
  
  *************************
  public:	
	// calculate the maximum sum with out adjacent
	int findMaxSum(int *arr, int n) {
	    // code here
	  vector<int>vec(n,0);
	  vec[0] =arr[0];
	  for(int i=1;i<n;i++){
	      int p =arr[i] + vec[i-2];
	      int np = vec[i-1];
	      vec[i] =max(p,np);
	  }
	  return vec[n-1];
	}
