 private:
  void dfs(int node,vector<int>adj[],vector<int>&vis,vector<int>&height){
      vis[node]=1;
      for(auto &it : adj[node]){
          if(!vis[it]){
              height[it]=height[node]+1;
              dfs(it,adj,vis,height);
          }
      }
  }
  public:
    int optimalValue(int n, int x, vector<int> &p) {
        vector<int>adj[n+1];
        int root =-1;
        for(int i=0;i<n;i++){
            if(p[i] == -1) root = i+1;
            else {
                adj[p[i]].push_back(i+1);
            }
        }
        
        vector<int>vis(n+1,0);
        vector<int>height(n+1,0);
        height[root] = 1;
        dfs(root,adj,vis,height);
        
        int depth =*max_element(height.begin(),height.end());
        int ans = (x+depth-1) / depth;//to get shill value
        return ans;
        
    }
