
class Solution{
    private:
    void solve (int i,int j,vector<vector<int>>&m,int n, vector<vector<int>>&vis, vector<string>&ans, string move){
        if(i==n-1 && j==n-1){
            ans .push_back(move);
            return;
        }
        
        if(i+1<n && !vis[i+1][j] && m[i+1][j] == 1){
            vis[i][j]=1;
            solve(i+1,j,m,n,vis,ans,move +'D');
            vis[i][j]=0;
        }
        if(j-1 >=0 && !vis[i][j-1] && m[i][j-1] == 1){
            vis[i][j]=1;
            solve(i,j-1,m,n,vis,ans,move +'L');
            vis[i][j]=0;
        }
        if(j+1<n && !vis[i][j+1] && m[i][j+1]==1){
            vis[i][j]=1;
            solve(i,j+1,m,n,vis,ans,move +'R');
            vis[i][j]=0;
        }
        if(i-1 >=0 && !vis[i-1][j] && m[i-1][j]==1){
            vis[i][j]=1;
            solve(i-1,j,m,n,vis,ans,move+'U');
            vis[i][j]=0;
        }
        
    }
    public:
    vector<string> findPath(vector<vector<int>> &m, int n) {
        vector<string>ans;
        vector<vector<int>>vis(n, vector<int>(n,0));
        if(m[0][0] == 1){
            solve(0,0,m,n,vis,ans,"");
        }
        return ans;
    }
};

    



********************************************************************
class Solution{
    private:
    void solve(int i,int j,vector<vector<int>>&m,int n,vector<string>&ans, vector<vector<int>>&vis, string move, int di[], int dj[]){
        if(i==n-1 && j==n-1){
            ans.push_back(move);
            return;
        }
        string dir ="DLRU";
        for(int ind=0;ind<4;ind++){
            int nexti = i+ di[ind];
            int nextj =j+dj[ind];
            if(nexti >=0 && nextj >=0 && nexti <n && nextj <n && !vis[nexti][nextj] && m[nexti][nextj]== 1){
                vis[i][j]=1;
                solve(nexti,nextj,m,n,ans,vis,move+dir[ind],di,dj);
                vis[i][j]=0;
            }
        }
    }
    public:
    vector<string> findPath(vector<vector<int>> &m, int n) {
        vector<string>ans;
        vector<vector<int>>vis(n, vector<int>(n,0));
        int di[] ={+1,0,0,-1};
        int dj[] = {0,-1,1,0};
        if(m[0][0] ==1){
            solve(0,0,m,n,ans,vis,"",di,dj);
        }
        return ans;
    }
};
