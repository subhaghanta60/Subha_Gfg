 private:
    void dfs(int node, vector<int>adj[],int vis[],string &col,set<char>&st){
      vis[node]=1;
      for(auto &it:adj[node]){
          if(!vis[it] && col[it] == col[node]){
              dfs(it,adj,vis,col,st);
          }
          else if(col[it] != col[node]){
              //store the adjacent node but don't call dfs for it
              st.insert(col[it]);
              
              
          }
      }
      
  }
  public:
    vector<string> solve(int N, int M, int Q, string col,
                         vector<vector<int> > &Edge, vector<string> &query) {
        int dp[26][26][26]={0};
        vector<int>adj[N];
        for(auto &it: Edge){
            adj[it[0]].push_back(it[1]);
            adj[it[1]].push_back(it[0]);
        }
        int vis[N]={0};
        
        for(int i=0;i<N;i++){
            if(!vis[i]){
                set<char>st;
                dfs(i,adj,vis,col,st);
                
                for(auto it1:st){
                    for(auto it2: st){
                        dp[col[i]-'a'][it1-'a'][it2-'a']=1;
                    }
                }
            }
        }
        vector<string>ans;
        for(auto &it: query){
            char a =it[0]-'a';
            char b = it[1]-'a';
            char c =it[2]-'a';
            if(dp[a][b][c] || dp[a][c][b] || dp[b][c][a]|| dp[b][a][c] || dp[c][a][b] || dp[c][b][a]){
                ans.push_back("YES");
            }
            else {
                ans.push_back("NO");
            }
            
        }
        return ans;
    }
